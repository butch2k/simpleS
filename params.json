{"google":"","tagline":"Simple Server for Node.js","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# simpleS 0.2.3\r\n\r\nsimpleS is a simple http server for node.js that has some special features:\r\n\r\n- Simple structure with minimum configuration\r\n- Routing for http GET and POST requests, static files and errors\r\n- Virtual Hosting\r\n- WebSocket implementation (version 13, RFC 6455)\r\n- CORS support\r\n- Sessions\r\n- Automatic response compression (deflate and gzip)\r\n- Easy to use interfaces for requests and responses\r\n- Client-side simple API for AJAX and WebSocket\r\n\r\nTested with node.js 0.8+\r\n\r\n*THIS DESCRIPTION IS NOT COMPLETE, MORE CONTENT WILL BE ADDED*\r\n\r\n### [Documentation](https://github.com/micnic/simpleS/wiki/Documentation \"simpleS Documentation\")\r\n\r\n## Instalation\r\n\r\n\tnpm install simples\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar simples = require('simples');\r\n\r\nvar server = simples(12345); // Your server is set up on port 12345\r\n```\r\n\r\n## Routing\r\n\r\n```javascript\r\nserver.get('/', function (request, response) {\r\n\tresponse.end('root');\r\n});\r\n\r\nserver.serve('static_files'); // Route for static files located in the folder \"static_files\"\r\n\r\nserver.error(404, function (request, response) {\r\n\tresponse.end('404');\r\n});\r\n```\r\n\r\n## Virtual Hosting\r\n\r\n```javascript\r\nvar mainHost = server; // Main host\r\nvar host1 = server.host('example.com'); // Other hosts\r\nvar host2 = server.host('example2.com');\r\n\r\n// Now for each host you can apply individual routing\r\nmainHost.get('/', function (request, response) {\r\n\tresponse.end('Main Host');\r\n});\r\n\r\nhost1.get('/', function (request, response) {\r\n\tresponse.end('Host1');\r\n});\r\n\r\nhost2.get('/', function (request, response) {\r\n\tresponse.end('Host2');\r\n});\r\n```\r\n\r\n## WebSocket\r\n\r\n```javascript\r\nserver.ws('/', {\r\n\tlength: 1024, // The maximum size of a message\r\n\tprotocols: ['echo'] // The accepted protocols\r\n}, function (connection) {\r\n\tconsole.log('New connection');\r\n\r\n\tconnection.on('message', function (message) {\r\n\t\tmessage = message.toString();\r\n\t\tconsole.log(message);\r\n\t\tconnection.send(message);\r\n\t});\r\n\r\n\tconnection.on('close', function () {\r\n\t\tconsole.log('Connection closed');\r\n\t});\r\n});\r\n```\r\n\r\nOn client:\r\n\r\n```javascript\r\nvar socket = new WebSocket('ws://localhost:12345/', 'echo'); // Enjoy the real-time connection\r\n\r\nsocket.onmessage = function (event) {\r\n\tconsole.log(event.data);\r\n};\r\n\r\nsocket.send('ECHO');\r\n```","name":"simpleS"}